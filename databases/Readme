# ImageonApp Local DynamoDB Setup

This guide will walk you through setting up a local DynamoDB instance using Docker, creating the **ImageonApp** table with the single-table design and GSIs, and seeding it with initial data.

---

## Prerequisites

1. **Docker** installed and running on your machine.

   * If not installed, download and install Docker Desktop from [https://www.docker.com/get-started](https://www.docker.com/get-started).

2. **AWS CLI** (v2) installed and configured.

   * Install: [https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)
   * Configure with dummy credentials (local mode ignores them):

     ```bash
     aws configure
     # Enter any values for AWS Access Key ID / Secret, e.g., 'test', region 'us-east-1'.
     ```

3. A working terminal/shell (bash, zsh, PowerShell).

---

## 1. Run DynamoDB Local via Docker

Pull and run the official DynamoDB Local container:

```bash
docker pull amazon/dynamodb-local
```

Start it on port `8000`:

```bash
docker run -d -p 8000:8000 --name dynamodb-local amazon/dynamodb-local
```

> **Optional:** Use Docker Compose by creating a `docker-compose.yml`:
>
> ```yaml
> version: "3.8"
> services:
>   dynamodb-local:
>     image: amazon/dynamodb-local
>     container_name: dynamodb-local
>     ports:
>       - "8000:8000"
>     volumes:
>       - ./dynamodb_local_db:/home/dynamodblocal/data
>     command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data"
> ```
>
> Then launch:
>
> ```bash
> ```

docker-compose up -d

````

Verify it’s running:

```bash
docker ps | grep dynamodb-local
````

---

## 2. Create the `ImageonApp` Table

1. **Save the table definition** to `create-imageonapp-table.json`:

   ```json
   {
     "TableName": "ImageonApp",
     "AttributeDefinitions": [
       { "AttributeName": "PK",     "AttributeType": "S" },
       { "AttributeName": "SK",     "AttributeType": "S" },
       { "AttributeName": "GSI1PK", "AttributeType": "S" },
       { "AttributeName": "GSI1SK", "AttributeType": "S" },
       { "AttributeName": "GSI2PK", "AttributeType": "S" },
       { "AttributeName": "GSI2SK", "AttributeType": "S" },
       { "AttributeName": "GSI3PK", "AttributeType": "S" },
       { "AttributeName": "GSI3SK", "AttributeType": "S" }
     ],
     "KeySchema": [
       { "AttributeName": "PK", "KeyType": "HASH" },
       { "AttributeName": "SK", "KeyType": "RANGE" }
     ],
     "BillingMode": "PAY_PER_REQUEST",
     "GlobalSecondaryIndexes": [
       {
         "IndexName": "GSI1",
         "KeySchema": [
           { "AttributeName": "GSI1PK", "KeyType": "HASH" },
           { "AttributeName": "GSI1SK", "KeyType": "RANGE" }
         ],
         "Projection": { "ProjectionType": "ALL" }
       },
       {
         "IndexName": "GSI2",
         "KeySchema": [
           { "AttributeName": "GSI2PK", "KeyType": "HASH" },
           { "AttributeName": "GSI2SK", "KeyType": "RANGE" }
         ],
         "Projection": { "ProjectionType": "ALL" }
       },
       {
         "IndexName": "GSI3",
         "KeySchema": [
           { "AttributeName": "GSI3PK", "KeyType": "HASH" },
           { "AttributeName": "GSI3SK", "KeyType": "RANGE" }
         ],
         "Projection": { "ProjectionType": "ALL" }
       }
     ]
   }
   ```

2. **Create the table** by running:

   ```bash
   aws dynamodb create-table \
     --cli-input-json file://create-imageonapp-table.json \
     --endpoint-url http://localhost:8000
   ```

3. **Wait until it’s ACTIVE**:

   ```bash
   aws dynamodb wait table-exists \
     --table-name ImageonApp \
     --endpoint-url http://localhost:8000
   ```

4. **Confirm status**:

   ```bash
   aws dynamodb describe-table \
     --table-name ImageonApp \
     --query "Table.TableStatus" --output text \
     --endpoint-url http://localhost:8000
   # Should print: ACTIVE
   ```

---

## 3. Seed the Table

1. **Save your seed data** to `seed-imageonapp.json`.

   > The file should include at least **5** entries each for users, posts, follows, and likes. Use the batch format:
   >
   > ```json
   > {
   >   "ImageonApp": [
   >     { "PutRequest": { "Item": { /* user item */ } } },
   >     { "PutRequest": { "Item": { /* post item */ } } },
   >     /* … more items … */
   >   ]
   > }
   > ```

2. **Run the batch-write**:

   ```bash
   aws dynamodb batch-write-item \
     --request-items file://seed-imageonapp.json \
     --endpoint-url http://localhost:8000
   ```

3. **Handle unprocessed items** (if any):

   * The CLI will return an `UnprocessedItems` map if throttled. Simply re-run the same command until it’s empty.

---

## 4. Verify Your Data

* **List tables**:

  ```bash
  aws dynamodb list-tables --endpoint-url http://localhost:8000
  # Should include: ImageonApp
  ```

* **Scan the table**:

  ```bash
  aws dynamodb scan \
    --table-name ImageonApp \
    --limit 10 \
    --endpoint-url http://localhost:8000
  ```

  You should see seeded user, post, follow, and like items.

---

## Troubleshooting

* **Connection refused**: Ensure Docker container is running and mapped to port 8000.
* **JSON parse errors**: Check for trailing commas or invalid syntax in your `.json` files.
* **UnprocessedItems**: Simply retry the batch-write command.

---

Now you have a local DynamoDB with your `ImageonApp` table and sample data ready for development and testing. Happy coding!
